
https://kubernetes.io/docs/reference/       ----> 1.16


kubeadm get nodes -w
kubectl get --help
kubectl get pods --all-namespaces
kubectl get nodes -o wide
kubectl api-versions
kubectl api-resources | grep pod


To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.49.80:6443 --token hs4bxe.67nzlx09ki5ttw2q \
    --discovery-token-ca-cert-hash sha256:d87940c8cecb72df7a5b0673f314970bf94914d84f41394c30a71a112c41048e


kubctl apply -f test.yml
kubectl delete -f test.yml
	
	
kubectl api-resources | grep pod
	
kubectl apply -f pod.yml
kubectl get pods
kubectl delete -f pod.yml
kubectl get pod nginix -oyaml
kubectl get mytomcat -oyaml | less (to see spec and status of the tomcat o/p in form of yaml)
kubectl describe pod tomcat
kubectl get pod mytomcat -o wide

kubernetes api reference


kubernetes documentation:-------

https://directdevops.blog/2020/02/08/devops-classroom-series-08-feb-2020/

Must Read:-
https://directdevops.blog/2019/10/10/kubernetes-master-and-node-components/
image:   https://i2.wp.com/directdevops.blog/wp-content/uploads/2019/10/k8smanifest.png?w=800&ssl=1

persistent volume in k8s:
https://i2.wp.com/directdevops.blog/wp-content/uploads/2020/02/kube14.png?w=800&ssl=1

Network in k8s:--
https://sookocheff.com/post/kubernetes/understanding-kubernetes-networking-model/

EKS:- 
https://directdevops.blog/2019/11/02/deploying-the-docker-application-and-mysql-with-volume-support-into-kubernetes-from-code-to-docker-registries-like-acr-ecr-and-then-to-eks-aks/



MASTER COMPONENTS:----------
kube-apiserver:-
This component is Central to Kubernetes. All communications between all components goes through the kube-apiserver
This component is frontend of the Kubernetes control plane.
This component exposes a REST API.
We would interact with this component using kubectl by using the YAML files, which are also referred as manifests
etcd:-
etcd stores the entire configuration and the state of the cluster.
etcd is consistent and highly available distributed key-value store.
kube-scheduler:-
It watches for new work tasks and assigns them to healthy nodes in the cluster
Controller-Manager:-
It is responsible for maintaining desired states mentioned in the manifest.
It looks like single component, but with in it has
Node Controller: for noticing & responding when node goes down
Replication Controller: for maintaining the correct number of pods for every replication controller object.
Endpoints Controller: Populates the Endpoints object
Cloud-Controller-manager:-
If you run the Kubernetes on a supported cloud platform such as AWS, Azure or Google, your control plane runs the Cloud-Controller-Manager.
It is responsible for underlying cloud specific controllers


NODE-COMPONENTS:------
kubelet:-
This is an agent which runs on each node in the cluster.
It watches for the instructions from API Server for new work assignments.
If it canâ€™t run the task assigned, it reports back to master and lets control plane decide on the actions.
It is responsible for the node registration process
Container Runtime:-
This is software which is responsible for running containers.
Some of them are Docker, containerd, cri-o, rktlet
kube-proxy:-
Maintains the network rules on nodes
This is responsible for networking on nodes.
Cluster DNS:-
Every Kubernetes Cluster has an internal DNS service
This has static IP address that is hardcoded into every Pod on the cluster i.e. all Pods now how to find the DNS Server
Services, Stateful Sets and Pods are registered with Cluster DNS.
Cluster DNS is based on CoreDNS


---
apiVersion : v1
kind : Pod
metadata : 
  name : mytomcat
spec : 
  containers : 
    - image : "tomcat:8"
      name : tomcatimg
      ports : 
        - containerPort : 8080
          protocol : TCP


