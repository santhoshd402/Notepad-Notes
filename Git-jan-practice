git init 
it will intiate the reposiry in that folder
git --version 2.22.0

basic-cmnds::---
git init
git status
git log
git commit -m "any msg"
git clean -fd   ---> remove untracked files
git add -u   --->adding tracked files only
git rm abc.txt  ---> removing file

workdir--->stage(index-area)--->localrepo--->remoterepo--->stash

---the below cmnds are used for user recognation
git config --global user.name "santhoshd402"
git config --global user.email santhosh.d402@gmail.com

git log --oneline  [too see one line output of commits]

sc-1----
create 2 folders with unique names
in one folder create a file and other fol keep empty

git status 
 it will show which are ready to commit(untracked fol)... it doesn't show fol2 bcz its empty dir

git add src.txt --> it will add specific file
git add .   ---> it will add all from work dir to stage
git add -all   --> it will add all chanes 

git commit -m "any msg"  ---> committing changes to local reposiry

git reset ---> remove changes from stage only (means before commit)
git reset --soft ---> it will remove from local repo and store in stage
git reset --mixed ---> it will remove changes from localrepo and stage but not in workdir
git reset --hard ---> it will remove changes from stage and work dir and localrepo also (works before commits) 
git reset --hard HEAD~2  ----> it will remove last two logs(commits)from localrepo and stage and even in workdir
git reset --soft HEAD~2   ----> it will remove last 2 logs(commits) from localrepo and store in 

https://i.stack.imgur.com/qRAte.jpg   (this image tells the diff b/w reset-models ) 


-----working with remote-location
create a reposiry in github

add that repository to our workdir

cmnds:--
git remote add origin <gitrepo url which one repo u want to add>
git remote add origin https://github.com/santhoshd402/Santhu.git
git push -u origin master (to push from loaclrepo to remote repo master branch)

git branch subsample
git checkout subsample
git commit -m "new branch test"
git push -u origin subsample


revert---
Eg:- a bug happen a particular commit id we want to remove
it will remove the changes at a particular commit in the workdir and remoterepo location
git revert <commit id of you want to change/remove at that commit>
git log
git push -u origin master

Git Branching Strategy:--
https://medium.com/dev-genius/choosing-the-right-git-branching-strategy-for-your-team-2a53144fcbdb#:~:text=Vincent%20Driessen%20created%20GitFlow%2C%20and,multiple%20requirements%20and%20feature%20requests.


How to ignore files or directory i git: 
* create a .gitignore file in the git repository and add all the exclusions over there
and add files which you want to ignore or skip
Examples:
#ignoring log files
*.log
# ignoring bin directories & its contents
bin/*
# Compiled files
*.tfstate
*.tfstate.backup
*.pem
# Module directory
.terraform/

URL:- https://www.toptal.com/developers/gitignore
for generating gitignore files of folders for language
Ex: open that url and type terraform and enter will  give some foiles to ignore


https://directdevops.blog/2020/09/20/devops-classroom-series-20-sept-2020/

--no-ff: when we merge code to empty branch [means no work so no conflicts] we use this
ex: dev_branch to Master_branch

* Diff between fetch and pull:- pull=fecth+merge[conflicts occurs]

* diff between rebase and merge: Git rebase and merge both integrate changes from one branch into another.
	Git rebase moves a feature branch into a master. Git merge adds a new commit, preserving the history
* cherrypick: Cherry picking is the act of picking a commit/sequence of commit from a branch and applying it to another
	git cherry-pick A^..B

* The difference between tags and branches are that a branch always points to the top of a development line 
	and will change when a new commit is pushed whereas a tag will not change. Thus tags are more useful to "tag" a specific version 
	and the tag will then always stay on that version and usually not be changed.	

==================TAGS=========
* gittag:- A Tag points to specific repositories history which is important
git tag
* Git has two types of tags
1. Light weighted:
	Is a pointer to a specific commit
	Create:
	git tag <tag_name>
2. Annotated:
	Annotated are stored as full objects in git database.
	Create:
	git tag -a <tag_name> -m "tag_message"


